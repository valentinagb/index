<!DOCTYPE html>
<html>
  <head>
    <title>Operaciones CSG</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="js/three.js"></script>
	<script src="js/controls/OrbitControls.js"></script>
	<script src="js/csg.js"></script>
	<script src="js/THREE.CSG.js"></script>
    <script>
		var scene, aspect, camera, renderer, controls;
		init();
		animate();
		function init(){
			//INICIALIZACIÓN
	        scene = new THREE.Scene();
	        aspect = window.innerWidth / window.innerHeight;
	        camera = new THREE.PerspectiveCamera( 75, aspect, 0.1, 1000);
	        renderer = new THREE.WebGLRenderer();
	        renderer.setSize( window.innerWidth, window.innerHeight );
	        document.body.appendChild( renderer.domElement );
		controls = new THREE.OrbitControls( camera, renderer.domElement );
			
			//ELEMENTOS COMUNES
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3( 0, 0, 0 );
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
		  	var color = new THREE.Color( 0x333333 );
		  	var colorR = new THREE.Color( 0xAA3333 );
		  	var colorG = new THREE.Color( 0x33AA33 );
		  	var colorB = new THREE.Color( 0x333366 );
		  	var colorBd = new THREE.Color( 0x6666AA );
		  	var colorGd = new THREE.Color( 0x66AA66 );
			
		  	//CREAR LAS GRILLAS PARA EL ESCENARIO
		  	var axesHelper = new THREE.AxesHelper( size );
			scene.add( axesHelper );
			
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color, color );
			scene.add( gridHelperXZ );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );

            //CREAR ILUMINACIÓN
            var ambient = new THREE.AmbientLight( 0xffffff, 2 );
            scene.add( ambient );
			
            var pointLight = new THREE.PointLight( 0xffffff, 1, 100 );
            pointLight.position.set( -5, -2, 5 );
            scene.add( pointLight );
			
            var pointLight = new THREE.PointLight( 0xffffff, .5, 100 );
            pointLight.position.set( 5, -2, -5 );
            scene.add( pointLight );
			
			//CREAR LAS GEOMETRÍAS
			var boxGeometry = new THREE.BoxGeometry( 1, 1, 1 );
			var sphereGeometry = new THREE.SphereGeometry( .6, 32, 32 );
                        var cilindro1 = new THREE.CylinderGeometry( .3, .3, 1.2, .4);
                        var cilindro2 = new THREE.CylinderGeometry( .3, .3, 1.2, .4);
                        var cilindro3 = new THREE.CylinderGeometry( .3, .3, 1.2, .4);
						
			//CREAR LOS MATERIALES
            var material1 = new THREE.MeshStandardMaterial( { color: colorR, metalness: 0.5, roughness: 0.1 } );
	    var material2 = new THREE.MeshStandardMaterial( { color: colorG, metalness: 0.5, roughness: 0.1 } );
	    var material3 = new THREE.MeshStandardMaterial( { color: colorB, metalness: 0.5, roughness: 0.1 } );
	    var material4 = new THREE.MeshStandardMaterial( { color: colorBd, metalness: 0.5, roughness: 0.1 } );
	    var material5 = new THREE.MeshStandardMaterial( { color: colorGd, metalness: 0.5, roughness: 0.1 } );
			
			//CREAR LAS MALLAS
			var cube = new THREE.Mesh( boxGeometry );
			var sphere = new THREE.Mesh( sphereGeometry );
			var cili1 = new THREE.Mesh( cilindro1 );
			var cili2 = new THREE.Mesh( cilindro2 );
			var cili3 = new THREE.Mesh( cilindro3 );
                        //sphere.position.x=3.5;
                        //sphere.position.z=-4;
                        //cube.position.x=3.5;
                        //cube.position.z=-4;
                        //cili1.position.x=-3.5;
                        //cili1.position.z=-3;
                        //cili2.position.x=-3.5;
                        //cili2.position.z=-3;
                        cili2.rotation.x=1.57;
                        //cili3.position.x=-3.5;
                        //cili3.position.z=-3;
                        cili3.rotation.z=1.57;
			
			//CONVERTIR A CSG
			var boxCSG = THREE.CSG.fromMesh( cube );
			var sphereCSG = THREE.CSG.fromMesh( sphere );
			var cili1CSG = THREE.CSG.fromMesh( cili1 );
			var cili2CSG = THREE.CSG.fromMesh( cili2 );
			var cili3CSG = THREE.CSG.fromMesh( cili3 );
			
			//APLICAR LAS OPERACIONES
			var result1 = sphereCSG.intersect( boxCSG );
			var result2 = cili1CSG.union( cili2CSG );
			var result3 = result2.union( cili3CSG );
			var result4 = result1.subtract( result3 );
			
			//CONVERTIR A MALLA DE THREE JS NUEVAMENTE
			var C2T1 = THREE.CSG.toMesh( result1 );
			var C2T2 = THREE.CSG.toMesh( result2 );
			var C2T3 = THREE.CSG.toMesh( result3 );
			var C2T4 = THREE.CSG.toMesh( result4 );

			
			C2T1.material = material5; 
			C2T2.material = material1;
			C2T3.material = material1;
			C2T4.material = material3;

			
			cube.material = material1;
			sphere.material = material2;
			cili1.material = material4;
			cili2.material = material3;
			cili3.material = material4;
			
			C2T1.position.x=-3.5;
			C2T1.position.z=1;
			C2T2.position.x=3;
			C2T2.position.z=-.5;
			C2T3.position.x=3.5;
			C2T3.position.z=3;
			C2T4.position.x=-1;
			C2T4.position.z=3;

			
			//AGREGAR A LA ESCENA LOS DIFERENTES ELEMENTOS
			scene.add( cube );
			scene.add( sphere );
			scene.add( C2T1 );
			scene.add( C2T2 );
			scene.add( C2T3 );
			scene.add( C2T4 );
			scene.add( cili1 );
			scene.add( cili2 );
			scene.add( cili3 );

			camera.position.x = 5;
			camera.position.y = 2;
		  	camera.position.z = 5;
			camera.lookAt( origin );
		}
		function animate(){
			requestAnimationFrame( animate );
			controls.update();
			render();
		}
		function render(){
			renderer.render( scene, camera );
		}
    </script>
  </body>
</html>
