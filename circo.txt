<!DOCTYPE html>
<html>
  <head>
    <title> Circus </title>
    <style>
			body {
				background:#777;
				padding:0;
				margin:0;
				font-weight: bold;
				overflow:hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				z-index:1000;
			}

			a { color: #ffffff; }

			#webglmessage a { color:#da0 }
		
    </style>
  </head>
  <body>
        <div id="info">MOVIMIENTO<br/>
            Usar flecha arriba y abajo para trasladar.<br/>
            Usar flechas izquierda y derecha para rotar.<br/>
           Usar mouse para mover escenario .<br/>
        </div>
    <script src="js/three.js"></script>
	<script src="js/controls/OrbitControls.js"></script>
	<script src="js/csg.js"></script>
	<script src="js/THREE.CSG.js"></script>
    <script>
		var scene, aspect, camera, renderer, controls;
		var geo1, geo2;
                var geometria, fan;
		var geometry1, geometry2, geometry3;
		var hips, torso, head;
		var rightFoot, rightLeg, rightArm, rightHand;
		var leftFoot, leftLeg, leftArm, leftHand;
		var startTime = Date.now();
		var upArrow = false;
		var downArrow = false;
		var leftArrow = false;
		var rightArrow = false;
		var scaleUp = false;
		var scaleDown = false;
		var thetaSum=0;
		var positivo=false;

class TRIANGLE_FAN{	
		  constructor( Geometria ){
		    this.geometria = Geometria;
			console.log(this.geometria);
		  }  
		  draw(){			
			for( var i=2; i<this.geometria.vertices.length; i++ ){
			  this.geometria.faces.push( new THREE.Face3(0,i-1,i) );
			}
			this.geometria.computeFaceNormals();
			//var materialFan = new THREE.MeshBasicMaterial( { color: 0x3333DD, side:THREE.DoubleSide } );
                        var materialFan = new THREE.MeshStandardMaterial( { color:  0xAA3333, metalness: 0.5, roughness: 0.1,side:THREE.DoubleSide } );
			var fan = new THREE.Mesh( this.geometria, materialFan );
			scene.add( fan );
		  }
		}


		init();
		animate();
		function init(){
			//INICIALIZACIÓN
	        scene = new THREE.Scene();
	        aspect = window.innerWidth / window.innerHeight;
	        camera = new THREE.PerspectiveCamera( 75, aspect, 0.1, 1000);
	        renderer = new THREE.WebGLRenderer();
	        renderer.setSize( window.innerWidth, window.innerHeight );
	        document.body.appendChild( renderer.domElement );
		controls = new THREE.OrbitControls( camera, renderer.domElement );
			
			
			//EVENTOS DE TECLADO
			
			var onKeyDown = function ( event ) {
				switch ( event.keyCode ) {
					case 38: // TRASLADAR ADELANTE
						upArrow = true;
						break;
					case 40: // TRASLADAR ATRÁS
						downArrow = true;
						break;
					case 83: // ESCALA AGRANDAR
						scaleUp = true;
						break;
					case 87: // ESCALA DISMINUIR
						scaleDown = true;
						break;
					case 37: // ROTAR CW
						leftArrow = true;
						break;
					case 39: // ROTAR CCW
						rightArrow = true;
						break;
					case 88: // SELECCIONAR EJE X DE ROTACION
						yAxis = false;
						zAxis = false;
						xAxis = true;
						break;
					case 89: // SELECCIONAR EJE Y DE ROTACION
						xAxis = false;
						zAxis = false;
						yAxis = true;
						break;
					case 90: // SELECCIONAR EJE Z DE 
						xAxis = false;
						yAxis = false;
						zAxis = true;
						break;
				}
			};	  
		  			
			var onKeyUp = function ( event ) {
				switch ( event.keyCode ) {
					case 38: // TRASLADAR
						upArrow = false;
						break;
					case 40: // TRASLADAR
						downArrow = false;
						break;
					case 37: // ROTAR CW
						leftArrow = false;
						break;
					case 39: // ROTAR CCW
						rightArrow = false;
						break;
					case 83: // ESCALA AGRANDAR
						scaleUp = false;
						break;
					case 87: // ESCALA DISMINUIR
						scaleDown = false;
						break;
				}
			};	  	
			
			document.addEventListener( 'keydown', onKeyDown, false );
			document.addEventListener( 'keyup', onKeyUp, false );





                        //ELEMENTOS COMUNES
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3( 0, 0, 0 );
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
		  	var color = new THREE.Color( 0x333333 );
		  	var colorr = new THREE.Color( 0xFFFF00 );
		  	var colorR = new THREE.Color( 0xAA3333 );
		  	var colorG = new THREE.Color( 0x33AA33 );
		  	var colorB = new THREE.Color( 0x333366 );
			var colorRd = new THREE.Color( 0xAA6666 );
		  	var colorBd = new THREE.Color( 0x6666AA );
		  	var colorGd = new THREE.Color( 0x66AA66 );
			

			
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color, color );
			scene.add( gridHelperXZ );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );

            //CREAR ILUMINACIÓN
            var ambient = new THREE.AmbientLight( 0xffffff, .2 );
            scene.add( ambient );
			
			
            var pointLight = new THREE.PointLight( 0xffffff, .5, 100 );
            pointLight.position.set( 5, -9, -5 );
            scene.add( pointLight );
			


			//CREAR LAS GEOMETRÍAS

                        var geo = new THREE.CubeGeometry(90,90,90);
                        var cubematerials = 
                         [
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/xposi.jpg"), side: THREE.DoubleSide}),
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/xnega.jpg"), side: THREE.DoubleSide}),
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/ypos.jpg"), side: THREE.DoubleSide}),
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/yneg.jpg"), side: THREE.DoubleSide}),
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/zpos.jpg"), side: THREE.DoubleSide}),
                          new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load("fondo/znega.jpg"), side: THREE.DoubleSide})
                          ];
 
                        var cubematerial = new THREE.MeshFaceMaterial(cubematerials);
                        var cubo = new THREE.Mesh(geo, cubematerial);
                        scene.add(cubo);


			geometry1 = new THREE.BoxGeometry( 1, 1, 1 );
			geometry2 = new THREE.CylinderGeometry( .5, .5, 1, 32 );
			geometry3 = new THREE.CylinderGeometry( .5, .5, 1, 32 );


			var boxGeometry = new THREE.BoxGeometry( 1, 1, 1 );
			var boxGeometry2 = new THREE.BoxGeometry( 1, 10, 1);
			var boxGeometry3 = new THREE.BoxGeometry( 1, 10, 1 );
			var boxGeometry4 = new THREE.BoxGeometry( 1, 10, 1);
			var boxposter = new THREE.BoxGeometry( 6, 8, .4);
			var boxGeometry5 = new THREE.BoxGeometry(1, 10, 1 );
			var boxGeometry6 = new THREE.BoxGeometry( 4, 8, 11 );
			var boxsofa= new THREE.BoxGeometry( 1.2, 2, .4 );
			var boxsofa2= new THREE.BoxGeometry( 1.4, .4, 1.3 );
			var sphereGeometry = new THREE.SphereGeometry( .6, 32, 32 );
                        var cilindro1 = new THREE.CylinderGeometry( 11, 11, 1.5, 44 );
                        var cilindro2 = new THREE.CylinderGeometry( 10.4, 10.4, 2, 42);
                        var cilindro3 = new THREE.CylinderGeometry( .3, .3, 1.2, .4);
                        var cilindro4 = new THREE.CylinderGeometry( .3, .3, 2, .4);

			geo1 = new THREE.Geometry();
			var p1 = new THREE.Vector3(20,0,20);
			var p2 = new THREE.Vector3(-20,0,20);
			var p3 = new THREE.Vector3(-20,0,-20);                  
			geo1.vertices.push(p1);
			geo1.vertices.push(p2);
			geo1.vertices.push(p3);			
			geo1.faces.push( new THREE.Face3(0,1,2) );
			geo1.computeFaceNormals();

			geo2 = new THREE.Geometry();
			var pp1 = new THREE.Vector3(-20,0,-20);
			var pp2 = new THREE.Vector3(20,0,-20);
			var pp3 = new THREE.Vector3(20,0,20);                  
			geo2.vertices.push(pp1);
			geo2.vertices.push(pp2);
			geo2.vertices.push(pp3);			
			geo2.faces.push( new THREE.Face3(0,1,2) );
			geo2.computeFaceNormals();



			var punto0 = new THREE.Vector3(0,40,0);			
                        var geometria = new THREE.Geometry();
			var radio = 50;
			var res = 10.0;
			geometria.vertices.push( punto0 );
            for( var i = 0; i <= res; i++){
                var punto = new THREE.Vector3();
				punto.x = radio * Math.cos( ( 2 * Math.PI * i )/ res );
                                punto.y = 20;
                                punto.z = radio * Math.sin( ( 2 * Math.PI * i )/ res );
				geometria.vertices.push( punto );				
            }
			fan = new TRIANGLE_FAN(geometria);	
			fan.draw();

                  

var geometry = new THREE.TorusGeometry( 14, 1.5, 8, 47,8.0 );
var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
	                var normal2 = new THREE.TextureLoader().load( 'texturas/sofa.jpg' );
				//STANDARD MATERIAL
				var brickMateriall = new THREE.MeshStandardMaterial( { color:0x66AA66 , map: normal2, normalMap: normal2,side:THREE.DoubleSide } );
var torus = new THREE.Mesh( geometry,brickMateriall );
torus.position.y=.3;
torus.rotation.x=1.55;
//scene.add( torus );

var geometryy = new THREE.TorusGeometry( 16, 1.5, 20, 23 );
var material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );
	                var normal2 = new THREE.TextureLoader().load( 'texturas/sofa.jpg' );
				//STANDARD MATERIAL
				var brickMateriall = new THREE.MeshStandardMaterial( { color:0x66AA66 , map: normal2, normalMap: normal2,side:THREE.DoubleSide } );
var toruss = new THREE.Mesh( geometryy,brickMateriall );
toruss.position.y=.3;
toruss.rotation.x=1.55;
scene.add( toruss );


						
			//CREAR LOS MATERIALES
            var material1 = new THREE.MeshStandardMaterial( { color: colorR, metalness: 0.5, roughness: 0.1 } );
	    var material2 = new THREE.MeshStandardMaterial( { color: colorG, metalness: 0.5, roughness: 0.1 } );
            var materiales = new THREE.MeshStandardMaterial( { color: 0x3333DD, metalness: 0.5, roughness: 0.1 } );
	    var material3 = new THREE.MeshStandardMaterial( { color: colorB, metalness: 0.5, roughness: 0.1 } );
	    var material4 = new THREE.MeshStandardMaterial( { color: colorBd, metalness: 0.5, roughness: 0.1 } );
	    var material5 = new THREE.MeshStandardMaterial( { color: colorG, metalness: 0.5, roughness: 0.1 } );
            var material11 = new THREE.MeshBasicMaterial( { color: color,side:THREE.DoubleSide  } );
	    var materiaal = new THREE.MeshBasicMaterial( { color: colorG, vertexColors: THREE.FaceColors } );
	    var material9 = new THREE.MeshStandardMaterial( { colorr: colorGd, metalness: 0.5, roughness: 0.1 } );


	                var blocksBase = new THREE.TextureLoader().load( 'texturas/redc.jpg' );
	                var normal = new THREE.TextureLoader().load( 'texturas/redc.jpg' );
				//STANDARD MATERIAL
				var brickMaterial = new THREE.MeshStandardMaterial( { color:0x66AA66 , map: blocksBase, normalMap: normal,side:THREE.DoubleSide } );

	                var blocksBase2 = new THREE.TextureLoader().load( 'texturas/sofa.jpg' );
	                var normal2 = new THREE.TextureLoader().load( 'texturas/sofa.jpg' );
				//STANDARD MATERIAL
				var brickMaterial2 = new THREE.MeshStandardMaterial( { color:0x66AA66 , map: blocksBase2, normalMap: normal2,side:THREE.DoubleSide } );

	                var blocksBase3 = new THREE.TextureLoader().load( 'texturas/poster2.jpg' );
				//STANDARD MATERIAL
				var brickMaterial3 = new THREE.MeshStandardMaterial( { color:0x66AA66 , map: blocksBase3, normalMap: blocksBase3 } );

	                var blocksBase4 = new THREE.TextureLoader().load( 'texturas/metal3.jpg' );
	                var normal4 = new THREE.TextureLoader().load( 'texturas/metal2.jpg' );
				//STANDARD MATERIAL
				var brickMaterial4 = new THREE.MeshStandardMaterial( { color:0xffffff , map: blocksBase4, normalMap: normal4 } );


			
			//CREAR LAS MALLAS
			var cube = new THREE.Mesh( boxGeometry );
			var cube2 = new THREE.Mesh( boxGeometry2 );
			var cube3 = new THREE.Mesh( boxGeometry3 );
			var cube4 = new THREE.Mesh( boxGeometry4 );
			var cube5 = new THREE.Mesh( boxGeometry5 );
			var cube6 = new THREE.Mesh( boxGeometry6 );
			var poster = new THREE.Mesh( boxposter,brickMaterial3);
			var s = new THREE.Mesh( boxsofa,brickMaterial2);
			var s2 = new THREE.Mesh( boxsofa2,brickMaterial2);
			var sphere = new THREE.Mesh( sphereGeometry );
			var cili1 = new THREE.Mesh( cilindro1 );
			var cili2 = new THREE.Mesh( cilindro2 );
			var cili3 = new THREE.Mesh( cilindro3 );
			var cili4 = new THREE.Mesh( cilindro4 );
			var piso  = new THREE.Mesh( geo1, material11 );
			var piso2  = new THREE.Mesh( geo2, material11 );
                        cube2.position.z=-7;
                        cube2.position.y=5;
                        cube2.position.x=-9.5;
                        cube3.position.z=-7;
                        cube3.position.y=5;
                        cube3.position.x=9.5;
                        cube4.position.z=7;
                        cube4.position.y=5;
                        cube4.position.x=-9.5;
                        cube5.position.z=7;
                        cube5.position.y=5;
                        cube5.position.x=9.5;
                        cube6.position.x=9;
                        cube6.position.y=4;
                        //cili2.rotation.x=1.57;
                        cili2.position.y=.5;
                        cili3.rotation.z=1.57;
                        poster.position.y=7;
                        poster.position.x=5;
                        poster.position.z=16;
                        poster.rotation.y=.8;
                        s.position.y=2;
                        s.position.x=5.5;
                        s.position.z=-11.8;
                        s.rotation.y=2.38;
                        s2.position.y=1.1;
                        s2.position.x=5;
                        s2.position.z=-11.4;
                        s2.rotation.y=.8;

			hips = new THREE.Mesh( geometry1, materiales );	
			leftLeg = new THREE.Mesh( geometry2, materiales ); 
			rightLeg = new THREE.Mesh( geometry3, materiales ); 
			
			leftLeg.applyMatrix( new THREE.Matrix4().makeScale(.5,2,.5) );
			leftLeg.applyMatrix( new THREE.Matrix4().makeTranslation(-.5,-1,0) );
			rightLeg.applyMatrix( new THREE.Matrix4().makeScale(.5,2,.5) );
			rightLeg.applyMatrix( new THREE.Matrix4().makeTranslation(.5,-1,0) );

	
			//hips.add(torso);
			hips.add(leftLeg);
			hips.add(rightLeg);


			
			//CONVERTIR A CSG
			var boxCSG = THREE.CSG.fromMesh( cube );
			var sphereCSG = THREE.CSG.fromMesh( sphere );
			var cili1CSG = THREE.CSG.fromMesh( cili1 );
			var cili2CSG = THREE.CSG.fromMesh( cili2 );
			var cili3CSG = THREE.CSG.fromMesh( cili3 );
			
			//APLICAR LAS OPERACIONES
			var result1 = sphereCSG.intersect( boxCSG );
			var result2 = cili1CSG.subtract( cili2CSG );
			var result3 = result2.union( cili3CSG );
			var result4 = result1.subtract( result3 );
			var result5 = boxCSG.subtract( sphereCSG );


			//CONVERTIR A MALLA DE THREE JS NUEVAMENTE
			var C2T1 = THREE.CSG.toMesh( result1 );
			var C2T2 = THREE.CSG.toMesh( result2 );
			var C2T3 = THREE.CSG.toMesh( result3 );
			var C2T4 = THREE.CSG.toMesh( result4 );
			var C2T5 = THREE.CSG.toMesh( result5 );

			
			cube.material = material1;
			cube2.material = brickMaterial4;
			cube3.material = brickMaterial4;
			cube4.material = brickMaterial4;
			cube5.material = brickMaterial4;
			cube6.material = brickMaterial;
			cili4.material = material5;


     //LUCES

var pointLight = new THREE.PointLight( 0xff0000, 1.6, 100 );
pointLight.position.set( -5, 6, 5 );
scene.add( pointLight );
var sphereSize = 8;
var pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );
//scene.add( pointLightHelper );

var pointLight = new THREE.PointLight( 0xff0000, 1.6, 100 );
pointLight.position.set( -6, 3, -3 );
scene.add( pointLight );



var pointLight = new THREE.PointLight( 0x3333DD, 1.9, 100 );
pointLight.position.set( -4, 8, -16 );
scene.add( pointLight );



var pointLight = new THREE.PointLight( 0xff0000, 1.6, 100 );
pointLight.position.set( -4, 8, 16 );
scene.add( pointLight );


var pointLight = new THREE.PointLight(  0x33AA33, 2, 100 );
pointLight.position.set( 5, 6, 5 );
scene.add( pointLight );
var sphereSize = 2;
var pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );
//scene.add( pointLightHelper );



var spotLight = new THREE.SpotLight( 0x333366  );
spotLight.position.set(  2, 9, 1 );
scene.add( spotLight );


var spotLight = new THREE.SpotLight(0x333366  );
spotLight.position.set(  -1, .7, 1 );
scene.add( spotLight );



			
			C2T1.position.x=4.9;
			C2T1.position.z=-11.5;
			C2T1.position.y=3.7;
			C2T2.position.y=.7;
			C2T4.position.x=-2;
			C2T4.position.z=5;
			C2T4.position.y=.5;
			C2T5.position.y=8.5;
			C2T5.position.x=9;
                        cili4.position.x=4.9;
                        cili4.position.z=-11.5;
                        cili4.position.y=2.3;
                        C2T5.scale.multiplyScalar( 1.5 );
			C2T1.material = material5; 
			C2T2.material = material3;
			C2T4.material = material3;
			C2T5.material = material9;


			
			//AGREGAR A LA ESCENA LOS DIFERENTES ELEMENTOS
			scene.add( cube2 );
			scene.add( cube3 );
			scene.add( cube4 );
			scene.add( cube5 );
			scene.add( cube6 );
			scene.add( cili4 );
			scene.add( piso );
			scene.add( piso2 );
			scene.add( C2T1 );
			scene.add( C2T2 );
			//scene.add( C2T3 );
			//scene.add( C2T4 );
			scene.add( C2T5 );
			scene.add( poster );
			scene.add( s );
			scene.add( s2 );
			scene.add( hips );

			camera.position.x = -4;
			camera.position.y = 7;
		  	camera.position.z = -17;
			camera.lookAt( origin );
		}
		function animate(){
			render();
			requestAnimationFrame( animate );
			controls.update();

		}
		function render(){
        var dtime = Date.now()-startTime;
		var tx=0, ty=0, tz=0;	//Variables para traslacion
		var sc = 1;				//Variable para escala
		var theta=0;			//Variable para ángulo de rotacion de piernas
		var sigma=0;			//Variable para ángulo de rotación de caderas
		
		if(thetaSum>=60*Math.PI/180)
			positivo = false;
		if(thetaSum<=-60*Math.PI/180)
			positivo = true;
		
		if(upArrow) {
			tx=0; ty=0; tz=.1;
			if(positivo)
				theta = .1;
			else
				theta = -.1;
		}
		if(downArrow) {
			tx=0; ty=0; tz=-.1;
			if(positivo)
				theta = .1;
			else
				theta = -.1;
		}
		thetaSum+=theta;
		
		if(rightArrow)
			sigma = -.1;
		if(leftArrow)
			sigma = .1;
		
		//MATRIZ DE TRASLACIÓN
		var t = new THREE.Matrix4();
		t.set( 	1, 0, 0, tx,
				0, 1, 0, ty, 
				0, 0, 1, tz,
				0, 0, 0, 1	);
		
		hips.matrix.multiply(t); 	//APLICAR LA TRASLACIÓN A NIVEL LOCAL
		
		//ROTACIONES
		var ct1 = Math.cos(theta);
		var ct2 = Math.cos(-theta);
		var cs = Math.cos(sigma);
		var st1 = Math.sin(theta);
		var st2 = Math.sin(-theta);
		var ss = Math.sin(sigma);
		var r = new THREE.Matrix4();
		var r1 = new THREE.Matrix4();
		var r2 = new THREE.Matrix4();

		//MATRIZ DE ROTACIÓN EN EJE Y
		r.set( 	   cs,  0, ss, 0,
					0,  1,  0, 0, 
				  -ss,  0, cs, 0,
					0,  0,  0, 1 );	
		//MATRICES DE ROTACIÓN EN EJE LOCAL DE PIERNAS	
		r1.set( 	1,  0,  0, 0,
					0, ct1,-st1, 0, 
					0, st1, ct1, 0,
					0,  0,  0, 1 );	
		r2.set( 	1,  0,  0, 0,
					0, ct2,-st2, 0, 
					0, st2, ct2, 0,
					0,  0,  0, 1 );							
		
		//ROTACION EN UN EJE PARALELO
		var tempMatrix = new THREE.Matrix4();
		tempMatrix.copyPosition( hips.matrix );
		hips.applyMatrix( new THREE.Matrix4().getInverse(tempMatrix) );
		hips.applyMatrix(r);
		hips.applyMatrix( tempMatrix );

	        hips.position.y=2;

		leftLeg.applyMatrix(r1);
		rightLeg.applyMatrix(r2);
				
        camera.lookAt( 0, 0, 0 );

			renderer.render( scene, camera );
		}
    </script>
  </body>
</html>
